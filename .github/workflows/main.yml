name: CI/CD Pipeline for Sentinel Wireframe

on: push: branches: [ main ] pull_request: branches: [ main ]

jobs: build: name: Build & Test runs-on: ubuntu-latest steps: - name: Checkout Repository uses: actions/checkout@v4

- name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: '18'

  - name: Cache npm dependencies
    uses: actions/cache@v3
    with:
      path: ~/.npm
      key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  - name: Install Dependencies and Prepare
    run: |
      npm install --legacy-peer-deps --ignore-scripts
      npm run prepare || true

  - name: Build Project
    run: npm run build

sca_check: name: Software Composition Analysis (SCA) runs-on: ubuntu-latest needs: build steps: - name: Checkout Repository uses: actions/checkout@v4

- name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: '18'

  - name: Cache npm dependencies
    uses: actions/cache@v3
    with:
      path: ~/.npm
      key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  - name: Install Dependencies
    run: npm install --legacy-peer-deps --ignore-scripts

  - name: Run npm Audit for SCA
    run: npm audit --json > audit-report.json
    continue-on-error: true

  - name: Upload npm Audit Report Artifact
    uses: actions/upload-artifact@v4
    with:
      name: npm-audit-report
      path: audit-report.json

sast_analysis: name: SAST Analysis (SonarQube) runs-on: ubuntu-latest needs: sca_check steps: - name: Checkout Repository uses: actions/checkout@v4

- name: Run SonarQube Scan via Docker
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    run: |
      docker run --rm \
        -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
        -e SONAR_TOKEN="${SONAR_TOKEN}" \
        -v "${GITHUB_WORKSPACE}:/usr/src" \
        sonarsource/sonar-scanner-cli \
        -Dsonar.projectKey=${{ secrets.PROJECT_NAME }} \
        -Dsonar.sources=src \
        -Dsonar.report.export.path=sonar-report.json
    continue-on-error: true

  - name: Upload Sonar Scan Artifact
    uses: actions/upload-artifact@v4
    with:
      name: sonar-scan-report
      path: sonar-report.json

build_deploy_uat: name: Build & Deploy to UAT runs-on: ubuntu-latest needs: sast_analysis steps: - name: Checkout Repository uses: actions/checkout@v4

- name: Setup Docker Buildx
    uses: docker/setup-buildx-action@v2

  - name: Docker Login
    uses: docker/login-action@v2
    with:
      username: ${{ secrets.DOCKERHUB_USERNAME }}
      password: ${{ secrets.DOCKERHUB_TOKEN }}

  - name: Build and Push Docker Image
    uses: docker/build-push-action@v2
    with:
      context: .
      file: Dockerfile
      push: true
      tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

sbom_and_image_scan: name: SBOM & Image Vulnerability Scan runs-on: ubuntu-latest needs: build_deploy_uat steps: - name: Checkout Repository uses: actions/checkout@v4

- name: Pull Trivy Docker Image
    run: docker pull aquasec/trivy:latest

  - name: Generate CycloneDX SBOM
    run: |
      docker run --rm \
        -v "${GITHUB_WORKSPACE}:/workspace" \
        aquasec/trivy:latest sbom --format cyclonedx -o /workspace/sbom.json \
        ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

  - name: Scan Docker Image with Trivy
    run: |
      docker run --rm \
        -v "${GITHUB_WORKSPACE}:/workspace" \
        aquasec/trivy:latest image --format json -o /workspace/trivy-image-scan.json \
        ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

  - name: Upload SBOM and Scan Artifacts
    uses: actions/upload-artifact@v4
    with:
      name: sbom-and-trivy-scan
      path: |
        sbom.json
        trivy-image-scan.json

